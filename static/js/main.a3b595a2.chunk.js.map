{"version":3,"sources":["components/Day.js","components/Cars.js","components/EasyRequest.js","components/Application.js","App.js","reportWebVitals.js","index.js"],"names":["Day","style","AreaChart","width","height","data","this","props","Area","type","dataKey","stroke","fill","XAxis","YAxis","Component","EasyRequest","cars","map","car","rating","handleClose","bind","handleInfo","state","info","numbers","setState","Typography","variant","component","Button","onClick","forecast","Dialog","onClose","open","DialogTitle","DialogContent","DialogContentText","DialogActions","color","Application","handleChange","handleDelete","handleSubmit","handleDateChange","handleTimeChange","randomData","items","date","time","timeInt","selected","station","submitted","persent","fetch","then","res","json","facet_groups","facets","currentDate","Date","month","getMonth","hour","getHours","minutes","getMinutes","day","getDate","getFullYear","option","name","event","target","value","parseInt","substr","sampleData","i","push","random","Card","CardContent","Grid","container","spacing","item","xs","Autocomplete","id","options","getOptionLabel","renderInput","params","TextField","label","onChange","noValidate","defaultValue","InputLabelProps","shrink","inputProps","step","Divider","Chip","onDelete","List","ListItem","occupancy","min","max","Math","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3b595a2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AreaChart, Area,  XAxis, YAxis } from 'recharts';\n\nexport default class Day extends Component {\n    render() {\n        return (\n            <div style={{'margin':'20px 0px 0px'}}>\n                <AreaChart width={580} height={200} data={this.props.data}>\n                  <Area type=\"monotone\" dataKey=\"occupancy\" stroke=\"#555555\" fill=\"#ececec\" />\n                  <XAxis dataKey=\"time\" />\n                  <YAxis />\n                </AreaChart>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport DirectionsCarIcon from '@material-ui/icons/DirectionsCar';\n\nexport default class EasyRequest extends Component {\n    render() {\n        const cars = this.props.cars.map((car) => {\n                if (car < this.props.rating) {\n                    return <DirectionsCarIcon key={car} style={{'color':'black'}}/>\n                } else {\n                    return <DirectionsCarIcon key={car} style={{'color':'grey'}}/>\n                }\n            }   \n        )\n\n        return (\n            <div>\n                { cars }    \n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\n\nimport Cars from './Cars';\n\nimport Typography from '@material-ui/core/Typography';\nimport HelpOutlineRoundedIcon from '@material-ui/icons/HelpOutlineRounded';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\n\nexport default class EasyRequest extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClose = this.handleClose.bind(this);\n        this.handleInfo = this.handleInfo.bind(this);\n\n        this.state = {\n            info: false,\n            numbers: [0,0.2,0.4,0.6,0.8,1]\n        }\n    }\n\n    handleInfo() {\n        this.setState({info: true})\n    }\n\n    handleClose() {\n        this.setState({info: false})\n    }\n\n    render() {\n        return (\n            <div>\n                <Typography variant=\"h6\" component=\"h3\">\n                    Current Status <Button onClick={this.handleInfo}><HelpOutlineRoundedIcon/> </Button>\n                </Typography>\n                <Cars rating={this.props.forecast} cars={this.state.numbers}/>\n                {this.state.info &&\n                    <Dialog onClose={this.handleClose} open={this.state.info}> \n                         <DialogTitle>Information</DialogTitle>\n                    <DialogContent>\n                      <DialogContentText>\n                      Current status shows how full your selected parking area is.\n                      </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Close\n                        </Button>\n                    </DialogActions>\n                    </Dialog>\n                }\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Chip from '@material-ui/core/Chip';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\n\nimport Day from './Day';\nimport EasyRequest from './EasyRequest';\n\nexport default class Application extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleDateChange = this.handleDateChange.bind(this);\n        this.handleTimeChange = this.handleTimeChange.bind(this);\n        this.randomData = this.randomData.bind(this);\n\n        this.state = {\n            items: [],\n            date: '',\n            time: '', \n            timeInt: 0,\n            selected: {station: '', date: ''},\n            submitted: false,\n            persent: '',\n            data: []\n        }\n    }\n\n    componentWillMount() {\n        // Fetch names of stations.\n        fetch('https://data.sbb.ch/api/records/1.0/search/?dataset=mobilitat&q=&facet=stationsbezeichnung')\n        .then(res => res.json())\n        .then(data => this.setState({ items: data.facet_groups[0].facets }))\n\n        this.randomData()\n\n        // Get current date and time.\n        let currentDate = new Date();\n        let month = currentDate.getMonth();\n        if (month <= 9) {\n            month = '0'+month\n        }\n        let hour = currentDate.getHours();\n        if (hour <= 9) {\n            hour = '0'+hour\n        }\n        let minutes = currentDate.getMinutes();\n        if (minutes <= 9) {\n            minutes = '0'+minutes\n        }\n        let day = currentDate.getDate();\n        if (day <= 9) {\n            day = '0'+day\n        }\n\n        this.setState({date: currentDate.getFullYear()+'-'+month+'-'+day, \n                       time: hour+':'+minutes})\n    }\n\n    handleSubmit() {\n        if (this.state.selected.station !== '') {\n            this.setState({submitted: true})\n            this.randomData()\n        }\n    }\n\n    handleChange(option) {\n        this.setState({selected: {station: option.name}})\n    }\n\n    handleDelete() {\n        this.setState({submitted: false})\n    };\n\n    handleDateChange(event) {\n        this.setState({date: event.target.value})\n        this.randomData()\n    };\n\n    handleTimeChange(event) {\n        this.setState({'timeInt': parseInt(event.target.value.substr(0,2),10)})\n        this.setState({time: event.target.value})\n    };\n\n    randomData() {\n        let sampleData = []\n        for (let i = 0; i < 24; i++) {\n            if (i < 5) {\n                sampleData.push({'time': '0'+i+':00', 'occupancy': random(0, 0.2)})\n            } else if (i === 23) {\n                sampleData.push({'time': ''+i+':00', 'occupancy': random(0, 0.2)})\n            } else if (i > 4 && i < 7) {\n                sampleData.push({'time': '0'+i+':00', 'occupancy': random(0.2, 0.4)})\n            } else if (i > 6 && i < 10) {\n                sampleData.push({'time': '0'+i+':00', 'occupancy': random(0.4, 0.7)})\n            } else if (i > 9 && i < 16) {\n                sampleData.push({'time': ''+i+':00', 'occupancy': random(0.5, 1)})\n            } else if (i > 15 && i < 20) {\n                sampleData.push({'time': ''+i+':00', 'occupancy': random(0.3, 0.6)})\n            } else if (i > 19 && i < 23) {\n                sampleData.push({'time': ''+i+':00', 'occupancy': random(0.1, 0.3)})\n            }\n        }\n        this.setState({'data': sampleData})\n    }\n\n    render() {\n        return (\n            <Card style={{\n                'maxWidth': '800px',\n                'minWidth': '600px',\n                'margin': '50px auto 10px'\n            }}>\n            <CardContent>\n            <Typography variant=\"h5\" component=\"h2\">\n                Parking Lot Forecast\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n                Choose the station and the time to get a forecast of our parking spaces at the train station\n            </Typography>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                <Autocomplete\n                    id=\"stations\"\n                    options={this.state.items}\n                    getOptionLabel={(option) => option.name}\n                    renderInput={(params) => <TextField {...params} label=\"Choose a Station\" variant=\"outlined\" />}\n                    style={{'margin': '20px auto 10px'}}\n                    onChange={(event,value) => this.handleChange(value)}\n                />\n                </Grid>\n                <Grid item xs={2}></Grid>\n                <Grid item xs={3}>\n                <form noValidate style={{'marginLeft':'20px'}}>\n                    <TextField\n                      id=\"date\"\n                      label=\"Date\"\n                      type=\"date\"\n                      defaultValue={this.state.date}\n                      onChange={(event) => this.handleDateChange(event)}\n                      InputLabelProps={{\n                        shrink: true,\n                      }}\n                    />\n                </form>\n                </Grid>\n                <Grid item xs={3}>\n                <form noValidate>\n                    <TextField\n                    id=\"time\"\n                    label=\"Time\"\n                    type=\"time\"\n                    defaultValue={this.state.time}\n                    onChange={(event) => this.handleTimeChange(event)}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    inputProps={{\n                      step: 6000 \n                    }}\n                  />\n                </form>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.handleSubmit}>\n                        Submit\n                    </Button>\n                </Grid>\n                <Grid item xs={1}></Grid>\n            </Grid>\n            {(this.state.submitted && this.state.selected.station !== '') && \n                <div>\n                    <Divider style={{'margin': '30px 30px auto'}}/>\n                    <Typography variant=\"h5\" component=\"h3\" style={{'margin': '30px 30px auto'}}>\n                        Parking Situation at    \n                        <Chip label={this.state.selected.station} onDelete={this.handleDelete} style={{'margin': '10px'}}/>\n                    </Typography>\n                    <List >\n                      <ListItem style={{'margin': '0px 5px 0px 50px'}}>\n                        <EasyRequest forecast={this.state.data[this.state.timeInt].occupancy}/>\n                      </ListItem>\n                      <Divider style={{'margin': '0px 50px 0px 50px'}}/>\n                        <Typography variant=\"h6\" component=\"h3\" style={{'margin': '30px 30px auto'}}>\n                            Expected car traffic in percent on {this.state.date}\n                        </Typography>\n                      <ListItem style={{'margin': '0px 5px 0px 50px'}}>\n                        <Day data={this.state.data}/>\n                      </ListItem>\n                      <Divider style={{'margin': '0px 50px 0px 50px'}}/>\n                     </List>\n                </div>\n            }\n            </CardContent>\n            </Card>\n        );\n    }\n}\n\nfunction random(min, max) {\n    return min + Math.random() * (max - min);\n  }","import Application from './components/Application';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Application/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}